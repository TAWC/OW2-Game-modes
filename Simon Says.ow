variables
{
	global:
		26: DevMode
		27: God
		28: ABUSEBOT
		29: DisableAbilitiesTrigger
		30: AllPlayersInRound
		31: Workshoptoggle
		32: RoundEnd
		33: MapCoordsList
		34: CurrentMapCoords
		35: AllowHUD

	player:
		27: SelectorCount
		28: Playerleftspawn
		29: ABUSEDPLAYER
		30: AbusedPlayerTrigger
		31: FlightTrigger
		32: SelectorText
		35: Guide
		36: Selector
}

disabled rule("Made by: OmerKZ (Please do no copy any rules without credits)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
}

disabled rule("Edited by: Fester")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
}

rule("Fixed")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Music;
		Disable Built-In Game Mode Scoring;
		Global.MapCoordsList[0] = Map(Castillo);
		Global.MapCoordsList[1] = Vector(-97.905, 35, 57.419);
		Global.MapCoordsList[2] = Vector(-94.893, 35, 56.780);
		Global.MapCoordsList[3] = Map(Black Forest Winter);
		Global.MapCoordsList[4] = Vector(-23.546, 14, 7.155);
		Global.MapCoordsList[5] = Vector(-23.375, 14, 4.955);
		Global.MapCoordsList[6] = Map(Necropolis);
		Global.MapCoordsList[7] = Vector(-8.182, 3, -1.580);
		Global.MapCoordsList[8] = Vector(-8.207, 3, 1.068);
		Global.MapCoordsList[9] = Map(Black Forest);
		Global.MapCoordsList[10] = Global.MapCoordsList[4];
		Global.MapCoordsList[11] = Global.MapCoordsList[5];
		Global.MapCoordsList[12] = Map(Lijiang Garden Lunar New Year);
		Global.MapCoordsList[13] = Vector(-3.508, 96, 136.029);
		Global.MapCoordsList[14] = Vector(0.750, 96, 136.118);
		Global.MapCoordsList[15] = Map(Oasis Gardens);
		Global.MapCoordsList[16] = Vector(115.225, 7, -231.987);
		Global.MapCoordsList[17] = Vector(116.950, 7, -233.741);
		Global.MapCoordsList[18] = Map(Lijiang Garden);
		Global.MapCoordsList[19] = Global.MapCoordsList[13];
		Global.MapCoordsList[20] = Global.MapCoordsList[14];
		Set Objective Description(All Players(All Teams), Custom String("Simon says will start when another player joins"),
			Visible To and String);
		Global.Workshoptoggle[0] = False;
	}
}

rule("Workshop Toggle")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Workshoptoggle[0] = True;
	}
}

rule("Global Var Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		All Players(All Teams).AbusedPlayerTrigger = False;
		All Players(All Teams).ABUSEDPLAYER = Empty Array;
		All Players(Team 1).Guide = Empty Array;
		Global.DisableAbilitiesTrigger[0] = False;
		Global.DisableAbilitiesTrigger[1] = False;
		Global.God = Empty Array;
		Global.AllowHUD = Empty Array;
		Global.ABUSEBOT = Empty Array;
		Global.CurrentMapCoords = Empty Array;
		Global.CurrentMapCoords[0] = Global.MapCoordsList[1 + Index Of Array Value(Global.MapCoordsList, Current Map)];
		Global.CurrentMapCoords[1] = Global.MapCoordsList[2 + Index Of Array Value(Global.MapCoordsList, Current Map)];
		All Players(Team 1).FlightTrigger = False;
		All Players(Team 1).Selector[0] = False;
		All Players(Team 1).Selector[1] = 200;
		All Players(Team 1).Selector[2] = Null;
		All Players(Team 1).Selector[3] = False;
		All Players(Team 1).SelectorText = Empty Array;
		All Players(Team 1).SelectorCount = 0;
		All Players(Team 2).Playerleftspawn = False;
	}
}

rule("Global Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Players In Slot(0, Team 1) != Null ? Custom String("Simon: {0} [{1}]", Players In Slot(0,
			Team 1), Hero Icon String(Hero Of(Players In Slot(0, Team 1)))) : Custom String("Put the simon in the first slot of team 1"),
			Null, Null, Top, 0, Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Players In Slot(0, Team 1), Hero Icon String(Hero Of(Player Closest To Reticle(Players In Slot(0, Team 1),
			All Teams))), Custom String("Player: "), Player Closest To Reticle(Players In Slot(0, Team 1), All Teams), Top, 1, Color(Blue),
			Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Players In Slot(1, Team 1), Hero Icon String(Hero Of(Player Closest To Reticle(Players In Slot(1, Team 1),
			All Teams))), Custom String("Player:"), Player Closest To Reticle(Players In Slot(1, Team 1), All Teams), Top, 1, Color(Blue),
			Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(All Teams), Global.DisableAbilitiesTrigger[0]), Ability Icon String(Hero(Sombra),
			Button(Ultimate)), Team 2, Custom String("Disabled"), Right, 1, Color(Red), Color(Red), Color(Red), Visible To and String,
			Visible Never);
		Create HUD Text(Filtered Array(All Players(All Teams),
			!Global.DisableAbilitiesTrigger[0] && Global.DisableAbilitiesTrigger[1] > 0), Ability Icon String(Hero(Sombra), Button(
			Ultimate)), Team 2, Custom String("Enabled"), Right, 1, Color(Green), Color(Green), Color(Green), Visible To and String,
			Visible Never);
		Create HUD Text(Remove From Array(Global.God, Players In Slot(0, Team 1)), Player Closest To Reticle(Global.God, All Teams), Null,
			Null, Top, 10, Color(White), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String(
			"Made By: OmerKZ\r\nEdited by : Fester\nCode: XQYZY \r\nVersion 1.6"), Right, 0, Color(White), Color(White), Color(White),
			Visible To, Visible Always);
	}
}

rule("Team 2 Setup")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create In-World Text(Is True For All(All Players(All Teams), Is Alive(Event Player) == False), Custom String("({0}) {1}",
			Hero Icon String(Hero Of(Event Player)), Event Player), Position Of(Event Player), 1, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Disable Game Mode HUD(Event Player);
		Disable Game Mode In-World UI(Event Player);
	}
}

rule("Team 1 Setup")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create HUD Text(Filtered Array(Event Player, Event Player.Guide[0] == False && Event Player.Guide[1] != 0), Custom String(
			"Time to open guide: ({0})", Event Player.Guide[1]), Null, Null, Left, 0, Color(Blue), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Guide[0] == False && Event Player.Guide[1] == 0), Custom String(
			"Press {0} + {1} to open guide", Input Binding String(Button(Crouch)), Input Binding String(Button(Interact))), Null, Null,
			Left, 0, Color(Blue), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(Event Player, Event Player.Guide[0] == True && Event Player.Guide[1] != 0), Custom String(
			"Time to close guide: ({0})", Event Player.Guide[1]), Null, Null, Left, 0, Color(Red), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Guide[0] == True && Event Player.Guide[1] == 0), Custom String(
			"Press {0} + {1} to close guide", Input Binding String(Button(Crouch)), Input Binding String(Button(Interact))), Null, Null,
			Left, 0, Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Guide[0] == True), Null, Null, Custom String("Rez : {1} + {0}",
			Input Binding String(Button(Primary Fire)), Input Binding String(Button(Interact))), Left, 1, Color(White), Color(Blue), Color(
			Blue), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Guide[0] == True), Null, Null, Custom String("Kill {0}: Press {1} + {2}",
			Icon String(Skull), Input Binding String(Button(Interact)), Input Binding String(Button(Secondary Fire))), Left, 2, Color(
			White), Color(White), Color(Blue), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Guide[0] == True), Null, Null, Custom String(
			"Swap heros {0}: Press {1} + {2}", Ability Icon String(Hero(Echo), Button(Ultimate)), Input Binding String(Button(Interact)),
			Input Binding String(Button(Crouch))), Left, 3, Color(White), Color(White), Color(Blue), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Guide[0] == True), Null, Null, Custom String(
			"Make everyone {0}: Press {1} + {2}", Hero Icon String(Hero Of(Event Player)), Input Binding String(Button(Interact)),
			Input Binding String(Button(Ability 2))), Left, 4, Color(White), Color(White), Color(Blue), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.Guide[0] == True), Null, Null, Custom String("Fly {0}: Press {1} + {2}",
			Ability Icon String(Hero(Pharah), Button(Ability 1)), Input Binding String(Button(Crouch)), Input Binding String(Button(
			Jump))), Left, 5, Color(White), Color(White), Color(Blue), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Remove From Array(Event Player, Players In Slot(1, Team 1)), Event Player.Guide[0] == True),
			Custom String(""), Null, Custom String("Tp everyone to you {0}: Press {1} + {2}", Ability Icon String(Hero(Lifeweaver), Button(
			Ability 2)), Input Binding String(Button(Ability 1)), Input Binding String(Button(Interact))), Left, 6, Color(White), Color(
			White), Color(Blue), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Remove From Array(Event Player, Players In Slot(1, Team 1)), Event Player.Guide[0] == True), Null,
			Null, Custom String("Disallow Abilitys {0}: Hold {1}", Ability Icon String(Hero(Sombra), Button(Secondary Fire)),
			Input Binding String(Button(Crouch))), Left, 7, Color(White), Color(White), Color(Blue), Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Event Player, Event Player.FlightTrigger || Global.DevMode), Null, Null, Custom String(
			"Server Load Peak/Average: ({0})/({1})", Server Load Peak, Server Load Average), Left, 10, Color(White), Color(White), Color(
			White), Visible To and String, Visible Never);
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.Selector[0]), Custom String("[{0}]",
			Hero Icon String(Event Player.Selector[2])), Vector(X Component Of(Eye Position(Event Player)), 1 + Y Component Of(
			Eye Position(Event Player)), Z Component Of(Eye Position(Event Player))), 2, Do Not Clip, Visible To Position and String,
			Color(Orange), Default Visibility);
		Create In-World Text(Filtered Array(Event Player, Current Array Element.Selector[0]),
			Event Player.Selector[2] == Null ? Custom String("No hero") : Custom String("Select [{0}]", Hero Icon String(
			Event Player.Selector[2])), Eye Position(Event Player) + Direction From Angles(Horizontal Facing Angle Of(Event Player), 15),
			4, Clip Against Surfaces, Visible To Position String and Color, Event Player.Selector[2] == Null ? Color(White) : Color(
			Orange), Default Visibility);
		Disable Game Mode HUD(Event Player);
		Disable Game Mode In-World UI(Event Player);
	}
}

rule("Damage Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Damage Dealt(All Players(Team 1), 400);
		Start Damage Modification(All Players(Team 1), Remove From Array(All Players(Team 2), Global.God), 10, Receivers and Damagers);
	}
}

rule("Teleport player to point")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Has Spawned(Event Player) == True;
		Event Player.Playerleftspawn == False;
		Current Map == Global.MapCoordsList[Index Of Array Value(Global.MapCoordsList, Current Map)];
	}

	actions
	{
		Wait(1, Ignore Condition);
		Teleport(Event Player, Absolute Value(X Component Of(Global.CurrentMapCoords[0]) - X Component Of(Global.CurrentMapCoords[1]))
			> Absolute Value(Z Component Of(Global.CurrentMapCoords[0]) - Z Component Of(Global.CurrentMapCoords[1])) ? Vector(Slot Of(
			Event Player) + X Component Of(Global.CurrentMapCoords[0]), Y Component Of(Global.CurrentMapCoords[0]), Z Component Of(
			Global.CurrentMapCoords[0])) : Vector(X Component Of(Global.CurrentMapCoords[0]), Y Component Of(Global.CurrentMapCoords[0]),
			Z Component Of(Global.CurrentMapCoords[0]) + Slot Of(Event Player)));
		Event Player.Playerleftspawn = True;
	}
}

rule("Finish Round")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.RoundEnd == False;
		Global.DevMode == False;
		Is True For All(All Players(Team 2), Is Dead(Current Array Element) || !Has Spawned(Current Array Element)) == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Global.RoundEnd = True;
		Declare Round Draw;
	}
}

disabled rule("Round Finished Sound")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.RoundEnd == False;
		Global.DevMode == False;
		Count Of(Filtered Array(Global.AllPlayersInRound, Is Alive(Current Array Element))) == 0;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Wait(0.400, Abort When False);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Wait(0.355, Abort When False);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Wait(0.240, Abort When False);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Wait(0.230, Abort When False);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Wait(0.400, Abort When False);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Wait(0.240, Abort When False);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Wait(0.230, Abort When False);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Wait(0.220, Abort When False);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Wait(0.350, Abort When False);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Wait(0.230, Abort When False);
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
	}
}

rule("Reset round")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.RoundEnd == True;
	}

	actions
	{
		Global.RoundEnd = False;
		Destroy All Dummy Bots;
		Destroy All HUD Text;
		Destroy All Icons;
		Destroy All In-World Text;
		Destroy All Effects;
		Set Crouch Enabled(All Players(All Teams), True);
		Set Ultimate Ability Enabled(All Players(All Teams), True);
		Set Melee Enabled(All Players(All Teams), True);
		Set Primary Fire Enabled(All Players(All Teams), True);
		Set Secondary Fire Enabled(All Players(All Teams), True);
		Set Ability 2 Enabled(All Players(All Teams), True);
		Set Jump Enabled(All Players(All Teams), True);
		Set Ability 1 Enabled(All Players(All Teams), True);
		Clear Status(All Players(All Teams), Invincible);
		Clear Status(All Players(All Teams), Phased Out);
		Clear Status(All Players(All Teams), Rooted);
		Clear Status(All Players(All Teams), Hacked);
		Clear Status(All Players(All Teams), Unkillable);
		Clear Status(All Players(All Teams), Stunned);
		Clear Status(All Players(All Teams), Burning);
		Clear Status(All Players(All Teams), Knocked Down);
		Clear Status(All Players(All Teams), Asleep);
		Clear Status(All Players(All Teams), Frozen);
		Allow Button(All Players(All Teams), Button(Primary Fire));
		Allow Button(All Players(All Teams), Button(Secondary Fire));
		Allow Button(All Players(All Teams), Button(Ability 1));
		Allow Button(All Players(All Teams), Button(Ability 2));
		Allow Button(All Players(All Teams), Button(Ultimate));
		Allow Button(All Players(All Teams), Button(Jump));
		Allow Button(All Players(All Teams), Button(Crouch));
		Allow Button(All Players(All Teams), Button(Interact));
		Allow Button(All Players(All Teams), Button(Melee));
		Allow Button(All Players(All Teams), Button(Reload));
		Set Gravity(All Players(All Teams), 100);
		Set Move Speed(All Players(All Teams), 100);
		Set Invisible(All Players(All Teams), None);
		Stop Forcing Player To Be Hero(All Players(All Teams));
	}
}

rule("Disable rmb, lmb, ability 2, ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Crouch Enabled(Event Player, False);
	}
}

rule("Enable rmb, lmb, ability 2, ability 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Button Held(Event Player, Button(Interact)) == False;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Crouch Enabled(Event Player, True);
	}
}

rule("Activate Hero Selector")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Alive(Event Player) == True;
		Is On Ground(Event Player) == True;
		Event Player.Selector[0] == False;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Event Player.Selector[0] = True;
		Event Player.Selector[1] = Horizontal Facing Angle Of(Event Player);
		Event Player.FlightTrigger = False;
		Cancel Primary Action(Event Player);
		Disallow Button(Event Player, Button(Primary Fire));
		Set Move Speed(Event Player, 100);
		Set Gravity(Event Player, 100);
		Set Status(Event Player, Null, Rooted, 9999);
		Set Status(Event Player, Null, Phased Out, 9999);
		Set Status(Event Player, Null, Frozen, 0.001);
		For Player Variable(Event Player, SelectorCount, 0, Count Of(All Heroes), 1);
			Create In-World Text(Filtered Array(Event Player, Current Array Element.Selector[0]), Hero Icon String(
				All Heroes[Event Player.SelectorCount]), Eye Position(Event Player) + Direction From Angles(
				Event Player.Selector[1] + Event Player.SelectorCount / Count Of(All Heroes) * 360, 0), 4.500, Do Not Clip, Visible To, Color(
				White), Default Visibility);
			Modify Player Variable(Event Player, SelectorText, Append To Array, Last Text ID);
			Wait(0.016, Ignore Condition);
		End;
	}
}

rule("Pick Hero")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Selector[0] == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Vertical Facing Angle Of(Event Player) > -9.500;
		Vertical Facing Angle Of(Event Player) < 0.500;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.Selector[2] = All Heroes[Round To Integer(((Horizontal Facing Angle Of(Event Player) - Event Player.Selector[1])
			/ 360 + 2) * Count Of(All Heroes), To Nearest) % Count Of(All Heroes)];
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Select Hero")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Vertical Facing Angle Of(Event Player) < 15;
		Vertical Facing Angle Of(Event Player) > 5;
		Event Player.Selector[0] == True;
		Is Game In Progress == True;
	}

	actions
	{
		If(Event Player.Selector[2] != Null);
			Start Forcing Player To Be Hero(Event Player, Event Player.Selector[2]);
			Event Player.Selector[3] = True;
		Else;
			Big Message(Event Player, Custom String("No Hero To Select"));
		End;
	}
}

rule("Deactivate Hero Selector")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		(Event Player.Selector[3] == True || Is Button Held(Event Player, Button(Jump))) == True;
		Event Player.Selector[0] == True;
		Is Game In Progress == True;
	}

	actions
	{
		Event Player.Selector[3] = False;
		Event Player.Selector[2] = Null;
		Event Player.Selector[0] = False;
		Clear Status(Event Player, Phased Out);
		Clear Status(Event Player, Rooted);
		For Player Variable(Event Player, SelectorCount, 0, Count Of(All Heroes), 1);
			Destroy In-World Text(Event Player.SelectorText[Event Player.SelectorCount]);
			Wait(0.016, Ignore Condition);
		End;
		Allow Button(Event Player, Button(Primary Fire));
		Event Player.SelectorCount = Empty Array;
		Event Player.SelectorText = Empty Array;
	}
}

rule("Allow/Disallow Buttons")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) != True;
		Event Player.FlightTrigger != True;
		Event Player.Selector != True;
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		"Disable"
		If(Global.DisableAbilitiesTrigger[0] == False);
			Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
			Global.DisableAbilitiesTrigger[0] = True;
			Global.DisableAbilitiesTrigger[1] = 0;
			Set Ability 1 Enabled(Remove From Array(All Players(Team 2), Global.ABUSEBOT && Global.God), False);
			Set Ability 2 Enabled(Remove From Array(All Players(Team 2), Global.ABUSEBOT && Global.God), False);
			Set Ultimate Ability Enabled(Remove From Array(All Players(Team 2), Global.God && Global.ABUSEBOT), False);
			Set Melee Enabled(Remove From Array(All Players(Team 2), Global.God && Global.ABUSEBOT), False);
			Set Primary Fire Enabled(Remove From Array(All Players(Team 2), Global.God && Global.ABUSEBOT), False);
			Set Secondary Fire Enabled(Remove From Array(All Players(Team 2), Global.God && Global.ABUSEBOT), False);
		"Enable"
		Else;
			Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
			Global.DisableAbilitiesTrigger[0] = False;
			Global.DisableAbilitiesTrigger[1] = 10;
			Set Primary Fire Enabled(Remove From Array(All Players(Team 2), Global.God && Global.ABUSEBOT), True);
			Set Secondary Fire Enabled(Remove From Array(All Players(Team 2), Global.God && Global.ABUSEBOT), True);
			Set Ability 1 Enabled(Remove From Array(All Players(Team 2), Global.God && Global.ABUSEBOT), True);
			Set Ability 2 Enabled(Remove From Array(All Players(Team 2), Global.God && Global.ABUSEBOT), True);
			Set Ultimate Ability Enabled(Remove From Array(All Players(Team 2), Global.God && Global.ABUSEBOT), True);
			Set Melee Enabled(Remove From Array(All Players(Team 2), Global.ABUSEBOT && Global.God), True);
		End;
	}
}

rule("HUD")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DisableAbilitiesTrigger[0] == False;
		Global.DisableAbilitiesTrigger[1] != 0;
	}

	actions
	{
		Wait(1, Abort When False);
		Global.DisableAbilitiesTrigger[1] -= 1;
		Loop If Condition Is True;
	}
}

rule("Guide")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.Guide[1] == False;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		If(Event Player.Guide[0]);
			Event Player.Guide[0] = False;
		Else;
			Event Player.Guide[0] = True;
		End;
		Event Player.Guide[1] = 4;
		Wait(1, Ignore Condition);
		Event Player.Guide[1] = 3;
		Wait(1, Ignore Condition);
		Event Player.Guide[1] = 2;
		Wait(1, Ignore Condition);
		Event Player.Guide[1] = 1;
		Wait(1, Ignore Condition);
		Event Player.Guide[1] = 0;
	}
}

rule("Teleport")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("Players teleported to you"));
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Event Player, 200);
		Teleport(Remove From Array(All Living Players(Team 2), Global.God && Global.ABUSEBOT), Position Of(Event Player));
		Set Status(Remove From Array(All Living Players(Team 2), Global.God && Global.ABUSEBOT), Null, Rooted, 5);
	}
}

rule("Resurrect Button")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Dead(Player Closest To Reticle(Event Player, All Teams)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) != True;
	}

	actions
	{
		Teleport(Player Closest To Reticle(Event Player, All Teams), Event Player);
		Resurrect(Player Closest To Reticle(Event Player, All Teams));
		Wait(0.250, Ignore Condition);
	}
}

rule("Kill Button")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) != True;
		Is Alive(Player Closest To Reticle(Event Player, All Teams)) == True;
		Is Alive(Event Player) == True;
		Player Closest To Reticle(Event Player, All Teams) != Players In Slot(0, Team 1);
		Is Game In Progress == True;
	}

	actions
	{
		Skip If(Player Closest To Reticle(Event Player, All Teams) == (Global.God || Global.ABUSEBOT), 1);
		Kill(Player Closest To Reticle(Event Player, All Teams), Event Player);
		Wait(0.250, Ignore Condition);
	}
}

rule("Hero Forcing")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		Big Message(Event Player, Custom String("Keep holding to change thier heros"));
		Wait(2, Abort When False);
		Small Message(Event Player, String("{0} {1}", Custom String("Enemy players are now"), Hero Icon String(Hero Of(Event Player))));
		Start Forcing Player To Be Hero(All Living Players(Team 2), Hero Of(Event Player));
		Play Effect(Event Player, Buff Explosion Sound, Color(Blue), Event Player, 200);
	}
}

rule("Respawn")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		(Event Player == Players In Slot(1, Team 1) && Attacker == Players In Slot(0, Team 1)) != True;
		Number Of Living Players(Team 2) >= 2;
	}

	actions
	{
		Big Message(Remove From Array(Attacker, Players In Slot(0, Team 1)), Custom String("BRUH"));
		Wait(1, Ignore Condition);
		Teleport(Victim, Nearest Walkable Position(Position Of(Victim)));
		Resurrect(Victim);
	}
}

rule("Simon/Guard ultimate charge (disabled for junkrat due to a bug)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Ultimate Charge Percent(Event Player) < 100;
		Hero Of(Event Player) != Hero(Junkrat);
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("Start / stop flight")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Event Player.Selector != True;
		Global.God.ABUSEDPLAYER != Event Player;
	}

	actions
	{
		If(Event Player.FlightTrigger);
			Event Player.FlightTrigger = False;
			Set Move Speed(Event Player, 100);
			Set Gravity(Event Player, 100);
		Else;
			Event Player.FlightTrigger = True;
			Set Gravity(Event Player, 0);
			Set Move Speed(Event Player, 300);
		End;
	}
}

rule("Flight up")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.FlightTrigger == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Apply Impulse(Event Player, Up, 8, To World, Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Flight down")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.FlightTrigger == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Jump)) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Apply Impulse(Event Player, Down, 8, To World, Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Cancel vertical momentum")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.FlightTrigger == True;
		!(Is Button Held(Event Player, Button(Jump)) || Is Button Held(Event Player, Button(Crouch))) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Apply Impulse(Event Player, Up, 0.001, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Down, 0.001, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Up, 0.001, To World, Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Cancel horizontal momentum")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.FlightTrigger == True;
		Throttle Of(Event Player) == Vector(0, 0, 0);
		Is Game In Progress == True;
	}

	actions
	{
		Apply Impulse(Event Player, Forward, 0.001, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Backward, 0.001, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Forward, 0.001, To World, Incorporate Contrary Motion);
		Apply Impulse(Event Player, Left, 0.001, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Right, 0.001, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Left, 0.001, To World, Incorporate Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Cancel flight when close to ground")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Altitude Of(Event Player) < 0.800;
		Event Player.FlightTrigger == True;
		!(Is Button Held(Event Player, Button(Jump)) && Is Button Held(Event Player, Button(Crouch))) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
		Set Gravity(Event Player, 100);
		Event Player.FlightTrigger = False;
	}
}

rule("Healing Team 1")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Health(Event Player) < Max Health(Event Player);
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Heal(Event Player, Null, (Max Health(Event Player) - Health(Event Player)) / 10);
		Wait(1, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Healing Team 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Health(Event Player) < Max Health(Event Player);
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Heal(Event Player, Null, Max Health(Event Player));
		Wait(1, Abort When False);
		Loop If Condition Is True;
	}
}

disabled rule("This rule is for testing, ignore it, like for real")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Array Contains(Array(Custom String("Fester"), Custom String("Gem")), Custom String("{1}", Null, Event Player)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Ultimate));
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)) && Is Button Held(Event Player, Button(Ultimate)) && Is Button Held(
			Event Player, Button(Interact)), 2);
		Skip If(!Is Button Held(Event Player, Button(Primary Fire)) || !Is Button Held(Event Player, Button(Ultimate)) || !Is Button Held(
			Event Player, Button(Interact)), 7);
		Wait(3, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("Someones Being annoying"));
		Remove player((Player Closest To Reticle(Event Player, All Teams))

		Wait(1, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("Fixed"));
		Wait(2, Ignore Condition);
		Restart Match;
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Ultimate));

	}
}
